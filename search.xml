<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue3笔记</title>
    <url>/2022/09/19/Vue3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>Vue3快速上手</h1>
<img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px">
<h2 id="1-vue3简介">1.Vue3简介</h2>
<ul>
<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>
<li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a></li>
<li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>
</ul>
<span id="more"></span>
<h2 id="2-vue3带来了什么">2.Vue3带来了什么</h2>
<h3 id="1-性能的提升">1.性能的提升</h3>
<ul>
<li>
<p>打包大小减少41%</p>
</li>
<li>
<p>初次渲染快55%, 更新渲染快133%</p>
</li>
<li>
<p>内存减少54%</p>
<p>…</p>
</li>
</ul>
<h3 id="2-源码的升级">2.源码的升级</h3>
<ul>
<li>
<p>使用Proxy代替defineProperty实现响应式</p>
</li>
<li>
<p>重写虚拟DOM的实现和Tree-Shaking</p>
<p>…</p>
</li>
</ul>
<h3 id="3-拥抱typescript">3.拥抱TypeScript</h3>
<ul>
<li>Vue3可以更好的支持TypeScript</li>
</ul>
<h3 id="4-新的特性">4.新的特性</h3>
<ol>
<li>
<p>Composition API（组合API）</p>
<ul>
<li>setup配置</li>
<li>ref与reactive</li>
<li>watch与watchEffect</li>
<li>provide与inject</li>
<li>…</li>
</ul>
</li>
<li>
<p>新的内置组件</p>
<ul>
<li>Fragment</li>
<li>Teleport</li>
<li>Suspense</li>
</ul>
</li>
<li>
<p>其他改变</p>
<ul>
<li>新的生命周期钩子</li>
<li>data 选项应始终被声明为一个函数</li>
<li>移除keyCode支持作为 v-on 的修饰符</li>
<li>…</li>
</ul>
</li>
</ol>
<h1>一、创建Vue3.0工程</h1>
<h2 id="1-使用-vue-cli-创建">1.使用 vue-cli 创建</h2>
<p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<h2 id="2-使用-vite-创建">2.使用 vite 创建</h2>
<p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>
<p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p>
<ul>
<li>什么是vite？—— 新一代前端构建工具。</li>
<li>优势如下：
<ul>
<li>开发环境中，无需打包操作，可快速的冷启动。</li>
<li>轻量快速的热重载（HMR）。</li>
<li>真正的按需编译，不再等待整个应用编译完成。</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h1>二、常用 Composition API</h1>
<p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>
<h2 id="1-拉开序幕的setup">1.拉开序幕的setup</h2>
<ol>
<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>
<li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li>
<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>
<li>setup函数的两种返回值：
<ol>
<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>
<li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>
</ol>
</li>
<li>注意点：
<ol>
<li>尽量不要与Vue2.x配置混用
<ul>
<li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li>
<li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>
<li>如果有重名, setup优先。</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>
</ol>
</li>
</ol>
<h2 id="2-ref函数">2.ref函数</h2>
<ul>
<li>作用: 定义一个响应式的数据</li>
<li>语法: <code>const xxx = ref(initValue)</code>
<ul>
<li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li>
<li>JS中操作数据： <code>xxx.value</code></li>
<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>
</ul>
</li>
<li>备注：
<ul>
<li>接收的数据可以是：基本类型、也可以是对象类型。</li>
<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>
<li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>
</ul>
</li>
</ul>
<h2 id="3-reactive函数">3.reactive函数</h2>
<ul>
<li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>
<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>
<li>reactive定义的响应式数据是“深层次的”。</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>
</ul>
<h2 id="4-vue3-0中的响应式原理">4.Vue3.0中的响应式原理</h2>
<h3 id="vue2-x的响应式">vue2.x的响应式</h3>
<ul>
<li>
<p>实现原理：</p>
<ul>
<li>
<p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>
</li>
<li>
<p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>存在问题：</p>
<ul>
<li>新增属性、删除属性, 界面不会更新。</li>
<li>直接通过下标修改数组, 界面不会自动更新。</li>
</ul>
</li>
</ul>
<h3 id="vue3-0的响应式">Vue3.0的响应式</h3>
<ul>
<li>实现原理:
<ul>
<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>
<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>
<li>MDN文档中描述的Proxy与Reflect：
<ul>
<li>
<p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
</li>
<li>
<p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">	<span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-reactive对比ref">5.reactive对比ref</h2>
<ul>
<li>从定义数据角度对比：
<ul>
<li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li>
<li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li>
<li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li>
</ul>
</li>
<li>从原理角度对比：
<ul>
<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>
<li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li>
</ul>
</li>
<li>从使用角度对比：
<ul>
<li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li>
<li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li>
</ul>
</li>
</ul>
<h2 id="6-setup的两个注意点">6.setup的两个注意点</h2>
<ul>
<li>
<p>setup执行的时机</p>
<ul>
<li>在beforeCreate之前执行一次，this是undefined。</li>
</ul>
</li>
<li>
<p>setup的参数</p>
<ul>
<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>
<li>context：上下文对象
<ul>
<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>
<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>
<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="7-计算属性与监视">7.计算属性与监视</h2>
<h3 id="1-computed函数">1.computed函数</h3>
<ul>
<li>
<p>与Vue2.x中computed配置功能一致</p>
</li>
<li>
<p>写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-watch函数">2.watch函数</h3>
<ul>
<li>
<p>与Vue2.x中watch配置功能一致</p>
</li>
<li>
<p>两个小“坑”：</p>
<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-watcheffect函数">3.watchEffect函数</h3>
<ul>
<li>
<p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>
</li>
<li>
<p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>
</li>
<li>
<p>watchEffect有点像computed：</p>
<ul>
<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="8-生命周期">8.生命周期</h2>
<ul>
<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：
<ul>
<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>
<li><code>destroyed</code>改名为 <code>unmounted</code></li>
</ul>
</li>
<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：
<ul>
<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>
<li><code>created</code>=======&gt;<code>setup()</code></li>
<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>
<li><code>mounted</code>=======&gt;<code>onMounted</code></li>
<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>
<li><code>updated</code> =======&gt;<code>onUpdated</code></li>
<li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li>
<li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li>
</ul>
</li>
</ul>
<h2 id="9-自定义hook函数">9.自定义hook函数</h2>
<ul>
<li>
<p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>
</li>
<li>
<p>类似于vue2.x中的mixin。</p>
</li>
<li>
<p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>
</li>
</ul>
<h2 id="10-toref">10.toRef</h2>
<ul>
<li>
<p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p>
</li>
<li>
<p>语法：<code>const name = toRef(person,'name')</code></p>
</li>
<li>
<p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p>
</li>
<li>
<p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p>
</li>
</ul>
<h1>三、其它 Composition API</h1>
<h2 id="1-shallowreactive-与-shallowref">1.shallowReactive 与 shallowRef</h2>
<ul>
<li>
<p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>
</li>
<li>
<p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
</li>
<li>
<p>什么时候使用?</p>
<ul>
<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>
<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>
</ul>
</li>
</ul>
<h2 id="2-readonly-与-shallowreadonly">2.readonly 与 shallowReadonly</h2>
<ul>
<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>
<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>
<li>应用场景: 不希望数据被修改时。</li>
</ul>
<h2 id="3-toraw-与-markraw">3.toRaw 与 markRaw</h2>
<ul>
<li>toRaw：
<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li>markRaw：
<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>
<li>应用场景:
<ol>
<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="4-customref">4.customRef</h2>
<ul>
<li>
<p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>
</li>
<li>
<p>实现防抖效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">	&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#x27;Demo&#x27;,</span><br><span class="line">		setup()&#123;</span><br><span class="line">			// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">			//自定义一个myRef</span><br><span class="line">			function myRef(value,delay)&#123;</span><br><span class="line">				let timer</span><br><span class="line">				//通过customRef去实现自定义</span><br><span class="line">				return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">					return&#123;</span><br><span class="line">						get()&#123;</span><br><span class="line">							track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">							return value</span><br><span class="line">						&#125;,</span><br><span class="line">						set(newValue)&#123;</span><br><span class="line">							clearTimeout(timer)</span><br><span class="line">							timer = setTimeout(()=&gt;&#123;</span><br><span class="line">								value = newValue</span><br><span class="line">								trigger() //告诉Vue去更新界面</span><br><span class="line">							&#125;,delay)</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">			return &#123;</span><br><span class="line">				keyword</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-provide-与-inject">5.provide 与 inject</h2>
<ul>
<li>
<p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p>
</li>
<li>
<p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li>
<p>具体写法：</p>
<ol>
<li>
<p>祖组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>后代组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h2 id="6-响应式数据的判断">6.响应式数据的判断</h2>
<ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<h1>四、Composition API 的优势</h1>
<h2 id="1-options-api-存在的问题">1.Options API 存在的问题</h2>
<p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。<br>
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image"><br>
<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image"></p>
<h2 id="2-composition-api-的优势">2.Composition API 的优势</h2>
<p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。<br>
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"><br>
<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"></p>
<h1>五、新的组件</h1>
<h2 id="1-fragment">1.Fragment</h2>
<ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<h2 id="2-teleport">2.Teleport</h2>
<ul>
<li>
<p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">	&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">			&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">			&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-suspense">3.Suspense</h2>
<ul>
<li>
<p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>
</li>
<li>
<p>使用步骤：</p>
<ul>
<li>
<p>异步引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">		&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">		&lt;Suspense&gt;</span><br><span class="line">			&lt;template v-slot:default&gt;</span><br><span class="line">				&lt;Child/&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">			&lt;template v-slot:fallback&gt;</span><br><span class="line">				&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">		&lt;/Suspense&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1>六、其他</h1>
<h2 id="1-全局api的转移">1.全局API的转移</h2>
<ul>
<li>
<p>Vue 2.x 有许多全局 API 和配置。</p>
<ul>
<li>
<p>例如：注册全局组件、注册全局指令等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>Vue3.0中对这些API做出了调整：</p>
<ul>
<li>
<p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>
<table>
<thead>
<tr>
<th>2.x 全局 API（<code>Vue</code>）</th>
<th>3.x 实例 API (<code>app</code>)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vue.config.xxxx</td>
<td>app.config.xxxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td><strong style="color:#DD5145">移除</strong></td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<h2 id="2-其他改变">2.其他改变</h2>
<ul>
<li>
<p>data选项应始终被声明为一个函数。</p>
</li>
<li>
<p>过度类名的更改：</p>
<ul>
<li>
<p>Vue2.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Vue3.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>
</li>
<li>
<p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p>
<ul>
<li>
<p>父组件中绑定事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>子组件中声明自定义事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p>
<blockquote>
<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>
</blockquote>
</li>
<li>
<p>…</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>L1-018 大笨钟</title>
    <url>/2022/09/19/L1-018-%E5%A4%A7%E7%AC%A8%E9%92%9F/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805119944605696">PTA-天梯赛——L1-018 大笨钟</a></p>
<p>微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。不过由于笨钟自己作息也不是很规律，所以敲钟并不定时。一般敲钟的点数是根据敲钟时间而定的，如果正好在某个整点敲，那么“当”数就等于那个整点数；如果过了整点，就敲下一个整点数。另外，虽然一天有24小时，钟却是只在后半天敲1~12下。例如在23:00敲钟，就是“当当当当当当当当当当当”，而到了23:01就会是“当当当当当当当当当当当当”。在午夜00:00到中午12:00期间（端点时间包括在内），笨钟是不敲的。</p>
<p>下面就请你写个程序，根据当前时间替大笨钟敲钟。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行按照hh:mm的格式给出当前时间。其中hh是小时，在00到23之间；mm是分钟，在00到59之间。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>根据当前时间替大笨钟敲钟，即在一行中输出相应数量个Dang。如果不是敲钟期，则输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Only hh:mm.  Too early to Dang.</span><br></pre></td></tr></table></figure>
<p>其中hh:mm是输入的时间。</p>
<span id="more"></span>
<h6 id="输入样例1：">输入样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19:05</span><br></pre></td></tr></table></figure>
<h6 id="输出样例1：">输出样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DangDangDangDangDangDangDangDang</span><br></pre></td></tr></table></figure>
<h6 id="输入样例2：">输入样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">07:05</span><br></pre></td></tr></table></figure>
<h6 id="输出样例2：">输出样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Only 07:05.  Too early to Dang.</span><br></pre></td></tr></table></figure>
<h6 id="我的解法-十分通俗易懂">我的解法（十分通俗易懂）</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh,mm;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d&quot;</span>,&amp;hh,&amp;mm);</span><br><span class="line">    <span class="keyword">if</span>(hh&lt;<span class="number">12</span>||(hh==<span class="number">12</span>&amp;&amp;mm==<span class="number">0</span>))<span class="comment">//小于12时或者恰好等于12时都是不dang</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Only %02d:%02d.  Too early to Dang.&quot;</span>,hh,mm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n=hh<span class="number">-12</span>;</span><br><span class="line">        <span class="keyword">if</span>(mm&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Dang&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>L1-017 到底有多二</title>
    <url>/2022/09/19/L1-017-%E5%88%B0%E5%BA%95%E6%9C%89%E5%A4%9A%E4%BA%8C/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805121500692480">PTA-天梯赛——L1-017 到底有多二</a></p>
<p>一个整数“犯二的程度”定义为该数字中包含2的个数与其位数的比值。如果这个数是负数，则程度增加0.5倍；如果还是个偶数，则再增加1倍。例如数字-13142223336是个11位数，其中有3个2，并且是负数，也是偶数，则它的犯二程度计算为：3/11×1.5×2×100%，约为81.82%。本题就请你计算一个给定整数到底有多二。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行给出一个不超过50位的整数N。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在一行中输出N犯二的程度，保留小数点后两位。</p>
<span id="more"></span>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-13142223336</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">81.82%</span><br></pre></td></tr></table></figure>
<p>鸣谢安阳师范学院段晓云老师和软件工程五班李富龙同学补充测试数据！</p>
<h6 id="我的解法-十分通俗易懂">我的解法（十分通俗易懂）</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     string number;</span><br><span class="line">     cin&gt;&gt;number;</span><br><span class="line">     <span class="type">int</span> c;</span><br><span class="line">     <span class="type">double</span> sum;</span><br><span class="line">     c=number.<span class="built_in">length</span>();</span><br><span class="line">     <span class="type">int</span> i,k=<span class="number">0</span>,len;</span><br><span class="line">     <span class="keyword">if</span>(number[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">         len=c<span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         len=c;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(number[i]==<span class="string">&#x27;2&#x27;</span>)k=k+<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span>(number[c<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;number[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">1.5</span>*<span class="number">2</span>*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(number[c<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">2</span>*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(number[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">1.5</span>*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        sum=(<span class="type">double</span>)k/(<span class="type">double</span>)len*<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,sum);</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;%&quot;</span>&lt;&lt;endl;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>我写了一首诗</title>
    <url>/2022/09/12/%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E9%A6%96%E8%AF%97/</url>
    <content><![CDATA[<p>没有大结局的故事值得品味吗?</p>
]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>如果再来一次,,,,,,,,,,,,,哪有如果啊</title>
    <url>/2022/09/11/%E6%97%A5%E5%B8%B8%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p><strong>音乐真的可以表达心情，睡不着的每个夜全靠以前的每个律动进行催眠</strong></p>
<p>如果再来一次，我可能会选择不遇见你。</p>
<p>如果再来一次，我可能尽量不和你接触，不说话，平平淡淡的相逢可能也会比现在的结局好看。</p>
<p>如果再来一次，我可能变得开朗，至少不像现在那么迷茫。</p>
<p>如果再来一次，我可能会选择远远观赏，而不是放大缺点，人的成长总是悄无声息的，而我却失去了耐心去等待。</p>
<span id="more"></span>
<p>如果再来一次，我可能会选择遵从内心，不想活的那么累。</p>
<p>如果再来一次，我可能选择珍惜，珍惜每天转头就能看到你的日子。</p>
<p>如果再来一次，我可能会更多点耐心，多点温柔。</p>
<p>如果再来一次，我可能会活成自己想要的样子。</p>
<p>如果再来一次，我可能选择。。。。。。。。。。。。。。。。。可是没有如果啊。。。。。</p>
<p>人活着的意义到底是什么？</p>
<p>什么叫做热爱生活？</p>
<p>怎么才叫成功？</p>
<p>怎样才叫爱上一个人？</p>
<p>为什么相爱的人不能在一起？</p>
<p>什么叫所爱隔山海？</p>
<p>什么叫爱情？</p>
<p>赢了世界又如何？</p>
<h2 id="当-：">《当》：</h2>
<blockquote>
<p>当山峰没有棱角的时候  当河水不再流</p>
<p>当时间停住日夜不分  当天地万物化为虚有</p>
<p>我还是不能和你分手  不能和你分手</p>
<p>你的温柔是我今生最大的守候</p>
<p>当太阳不再上升的时候  当地球不再转动</p>
<p>当春夏秋冬不再变换  当花草树木全部凋残</p>
<p>我还是不能和你分散  不能和你分散</p>
<p>你的笑容是我今生最大的眷恋</p>
<p>让我们红尘作伴活得潇潇洒洒  策马奔腾共享人世繁华</p>
<p>对酒当歌唱出心中喜悦  轰轰烈烈把握青春年华</p>
<p>让我们红尘作伴活得潇潇洒洒  策马奔腾共享人世繁华</p>
<p>对酒当歌唱出心中喜悦  轰轰烈烈把握青春年华</p>
</blockquote>
<h2 id="明天过后-：-我的闹钟">《明天过后》：（我的闹钟）</h2>
<blockquote>
<p>没有星星的夜空</p>
<p>没有话题能补充</p>
<p>太多承诺从指缝中溜走</p>
<p>不敢奢求什么</p>
<p>回忆将我们扣留</p>
<p>一瞬间亲吻的时候</p>
<p>一切就好像轮回般朦胧</p>
<p>心动渐渐的失控</p>
<p>是否两个人足够捕捉爱的镜头</p>
<p>闭上了眼睛记得你的笑容</p>
<p>幸福的从容将灵魂都掏空</p>
<p>享受一分钟的感动</p>
<p>是否爱上一个人不问明天过后</p>
<p>山明和水秀不比你有看头</p>
<p>牵着你的手一直走到最后</p>
<p>这一刻怎么回头</p>
</blockquote>
<h2 id="后悔无期-：">《后悔无期》：</h2>
<blockquote>
<p>合：你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>徐：等不到 风中你的脸颊</p>
<p>眼泪都美到很融洽</p>
<p>等不到 掩饰的雨落下</p>
<p>我的眼泪被你觉察</p>
<p>汪：等不到 你的雪月风花</p>
<p>我们的爱也有时差</p>
<p>等不到 不经意的牵挂</p>
<p>却没出息的放不下</p>
<p>徐：你说陪我到某年某月某天</p>
<p>却把我丢在某日某夜某街</p>
<p>错的并不是你 而是全世界</p>
<p>汪：你带走我的思念</p>
<p>却没说抱歉</p>
<p>一起走过的黑夜</p>
<p>变一地白雪</p>
<p>合：我把记忆都翻遍</p>
<p>却没有发现</p>
<p>我们约好的明天</p>
<p>你留给昨天</p>
<p>你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>你若离去 后会无期</p>
<p>汪：等不到 手中松开的沙</p>
<p>被风扬起的很优雅</p>
<p>等不到 送你蝴蝶发卡</p>
<p>你的他爱上了短发</p>
<p>徐：你说陪我到某年某月某天</p>
<p>却把我丢在某日某夜某街</p>
<p>错的并不是你 而是全世界</p>
<p>合：你带走我的思念</p>
<p>却没说抱歉</p>
<p>一起走过的黑夜</p>
<p>变一地白雪</p>
<p>我把记忆都翻遍</p>
<p>却没有发现</p>
<p>我们约好的明天</p>
<p>你留给昨天</p>
<p>你带走我的思念</p>
<p>却没说抱歉</p>
<p>一起走过的黑夜</p>
<p>变一地白雪</p>
<p>我把记忆都翻遍</p>
<p>却没有发现</p>
<p>我们约好的明天</p>
<p>你留给昨天</p>
<p>汪：我们约好的明天</p>
<p>合：你留给昨天</p>
</blockquote>
<h1>夜空中最亮的星</h1>
<blockquote>
<p>夜空中最亮的星  能否听清  那仰望的人</p>
<p>心底的孤独和叹息  oh  夜空中最亮的星</p>
<p>能否记起  曾与我同行  消失在风里的身影</p>
<p>我祈祷拥有一颗透明的心灵  和会流泪的眼睛</p>
<p>给我再去相信的勇气  oh越过谎言去拥抱你</p>
<p>每当我找不到存在的意义  每当我迷失在黑夜里</p>
<p>oh~夜空中最亮的星  请指引我靠近你  夜空中最亮的星</p>
<p>是否知道  曾与我同行的身影  如今在哪里</p>
<p>oh夜空中最亮的星  是否在意  是等太阳升起</p>
<p>还是意外先来临  我宁愿所有痛苦都留在心里</p>
<p>也不愿忘记你的眼睛  给我再去相信的勇气</p>
<p>oh越过谎言去拥抱你  每当我找不到存在的意义</p>
<p>每当我迷失在黑夜里  oh~夜空中最亮的星</p>
<p>oh请照亮我前行  我祈祷拥有一颗透明的心灵</p>
<p>和会流泪的眼睛  给我再去相信的勇气</p>
<p>oh越过谎言去拥抱你  每当我找不到存在的意义</p>
<p>每当我迷失在黑夜里  oh~夜空中最亮的星</p>
<p>请照亮我前行  夜空中最亮的星</p>
<p>能否听清  那仰望的人  心底的孤独和叹息</p>
</blockquote>
]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习之——卷积神经网络</title>
    <url>/2022/09/11/%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E2%80%94%E2%80%94%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h6 id="背景">背景</h6>
<img src="/images/image-20220911114410844.png" alt="引申背景" style="zoom:40%;">
> 是否可能进─步减少训练参数数量?
> 办法:提取出图像中的关键信息(轮廓)，再建立MLP模型进行训练
<h6 id="图像卷积运算">图像卷积运算</h6>
<blockquote>
<p>对图像矩阵与滤波器矩阵进行对应相乘再求和运算，转化得到新的矩阵,作用:<strong>快速定位图像中某些边缘特征</strong><br>
英文: convolution  —&gt; CNN</p>
</blockquote>
<p>A与B的卷积通常表示为:  A * B或convolution(A,B)<br>
<img src="/images/image-20220911121624085.png" alt="运算规则" style="zoom:33%;"><br>
<img src="/images/image-20220911122142445.png" alt="转换后" style="zoom:33%;"></p>
<span id="more"></span>
<h6 id="寻找竖向轮廓">寻找竖向轮廓</h6>
<img src="/images/image-20220911122445784.png" alt="转换后" style="zoom:33%;">
> 结论：包含竖向轮廓的区域非常亮（灰度值高)
###### 寻找竖向轮廓
<img src="/images/image-20220911122733403.png" alt="转换后" style="zoom:33%;">
<blockquote>
<p>结论：将图片与轮廓滤波器进行卷积运算,可快速定位固定轮廓特征的位置</p>
</blockquote>
<img src="/images/image-20220911122938543.png" alt="转换后" style="zoom:33%;">
> 结论：一个过滤器不够，需要寻找很多过滤器
<img src="/images/image-20220911123154171.png" alt="转换后" style="zoom:33%;">
<h6 id="池化层实现维度缩减">池化层实现维度缩减</h6>
<blockquote>
<p>池化:按照一个固定规则对图像矩阵进行处理,将其转换为更低维度的矩阵</p>
</blockquote>
<h6 id="最大法池化-max-pooling-常用">最大法池化(Max-pooling)（常用）</h6>
<blockquote>
<p>保留核心信息的情况下，实现维度缩减</p>
</blockquote>
<img src="/images/image-20220911123436374.png" alt="转换后" style="zoom:33%;">
<p>平均法池化(Avg-pooling)（取平均值）</p>
<h6 id="卷积神经网络">卷积神经网络</h6>
<blockquote>
<p>把卷积、池化、mlp先后连接在一起，组成卷积神经网络。</p>
</blockquote>
<img src="/images/image-20220911124154268.png" alt="转换后" style="zoom:33%;">
###### 卷积神经网络两大特点
<ol>
<li>参数共享(parameter sharing): 同一个特征过滤器可用于整张图片</li>
<li>稀疏连接（sparsity of connections): 生成的特征图片每个节点只与原图片中特定节点连接 =&gt; 将特征区域化，减小误差</li>
</ol>
<img src="/images/image-20220911124431218.png" alt="转换后" style="zoom:33%;">
<hr>
<h6 id="卷积运算导致的两个问题">卷积运算导致的两个问题</h6>
<ol>
<li>图像被压缩，造成信息丢失</li>
<li>边缘信息使用少，容易被忽略</li>
</ol>
<img src="/images/image-20220911125159146.png" alt="转换后" style="zoom:33%;">
通过padding增加像素的数量，由过滤器尺stride决定
<img src="/images/image-20220911132254701.png" alt="转换后" style="zoom:33%;">
###### 有效解决方法：图像填充（padding）
<blockquote>
<p>通过在图像各边增加像素，使其在进行卷积运算维持原图大小</p>
</blockquote>
<img src="/images/image-20220911125159146.png" alt="转换后" style="zoom:33%;">
<p>通过padding增加像素的数量，由过滤器尺stride决定</p>
<img src="/images/image-20220911132254701.png" alt="转换后" style="zoom:33%;">
<h6 id="经典的cnn模型">经典的CNN模型</h6>
<ol>
<li>LeNet-5</li>
<li>AlexNet</li>
<li>VGG</li>
</ol>
<blockquote>
<p>参考经典的CNN结构搭建新模型<br>
使用经典的CNN模型结构对图像预处理，再建立MLP模型</p>
</blockquote>
<h6 id="lenet-5">LeNet-5</h6>
<img src="/images/image-20220911132841327.png" alt="转换后" style="zoom:33%;">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf</span><br></pre></td></tr></table></figure>
<h6 id="alexnet">AlexNet</h6>
<img src="/images/image-20220911133208675.png" alt="转换后" style="zoom:33%;">
<p>AlexNet论文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入图像: 227X 227X 3RGB图，3个通道</p>
<p>训练参数:约60,000,000个</p>
<p>特点:</p>
<p>1、适用于识别较为复杂的彩色图，可识别1000种类别<br>
2、结构比LeNet更为复杂，使用Relu作为激活函数</p>
</blockquote>
<p>AlexNet的出现使得：</p>
<blockquote>
<p>学术界开始相信深度学习技术,<br>
在计算机视觉立用中可以得到很不错的结果。</p>
</blockquote>
<h6 id="vgg-16">VGG-16</h6>
<img src="/images/image-20220911133838642.png" alt="转换后" style="zoom:33%;">
<p>VGG-16论文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://arxiv.org/pdf/1409.1556.pdf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入图像:227 X 227X 3 RGB图，3个通道</p>
<p>训练参数:约138,000,000个</p>
<p>特点:</p>
<p>1、所有卷积层tilter 宽和高都是3、步长为1，padding都使用same convolution;<br>
2、所有池化层的 filtey宽和高都是况，步长都是2;<br>
3、相比alexnet，有更多的filter用于提取轮廓信息，具有更高精准性</p>
</blockquote>
<img src="/images/image-20220911134438302.png" alt="转换后" style="zoom:33%;">
<img src="/images/image-20220911134500337.png" alt="转换后" style="zoom:33%;">
<hr>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-016 查验身份证</title>
    <url>/2022/09/08/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-016-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805122985476096">PTA-天梯赛——L1-016 查验身份证</a></p>
<p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p>
<p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Z：0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">M：1 0 X 9 8 7 6 5 4 3 2</span><br></pre></td></tr></table></figure>
<p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出All passed。</p>
<span id="more"></span>
<h6 id="输入样例1：">输入样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">320124198808240056</span><br><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure>
<h6 id="输出样例1：">输出样例1：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure>
<h6 id="输入样例2：">输入样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">320124198808240056</span><br><span class="line">110108196711301862</span><br></pre></td></tr></table></figure>
<h6 id="输出样例2：">输出样例2：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">All passed</span><br></pre></td></tr></table></figure>
<h6 id="c-高级解法">C++高级解法</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">char</span>&gt; m;</span><br><span class="line"> </span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">1</span>, <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">2</span>, <span class="string">&#x27;X&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;9&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">4</span>, <span class="string">&#x27;8&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">5</span>, <span class="string">&#x27;7&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">7</span>, <span class="string">&#x27;5&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">8</span>, <span class="string">&#x27;4&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">9</span>, <span class="string">&#x27;3&#x27;</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">char</span>&gt;(<span class="number">10</span>, <span class="string">&#x27;2&#x27;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string num[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> quan[<span class="number">17</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; num[i].<span class="built_in">size</span>()<span class="number">-1</span>; ++j) &#123;</span><br><span class="line">             sum+=quan[j]*(num[i][j]<span class="number">-48</span>);<span class="comment">//48为字符&#x27;0&#x27;的十进制数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> Z=sum%<span class="number">11</span>;</span><br><span class="line">        <span class="type">char</span> M=m[Z];</span><br><span class="line">        <span class="keyword">if</span> (M==num[i][<span class="number">17</span>])&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;num[i]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count==n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;All passed&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="c-一般解法">C++一般解法</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三个变量分别储存权重、对应值、输入的身份证号*/</span></span><br><span class="line"><span class="type">int</span> quanzhong[<span class="number">17</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> m[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>&#125;; <span class="comment">//这里把X转化为10，方便之后的操作 </span></span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用来判断身份证号是否正确*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTrue</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]&lt;<span class="string">&#x27;0&#x27;</span> || s[i]&gt;<span class="string">&#x27;9&#x27;</span>)&#123;  <span class="comment">//先判断输入的值是否合法，如果不合法直接返回false </span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			sum += (s[i]-<span class="string">&#x27;0&#x27;</span>)*quanzhong[i];  <span class="comment">//用sum来保存每一位与权重相乘的和 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> temp = (s[<span class="number">17</span>]==<span class="string">&#x27;X&#x27;</span>)?<span class="number">10</span>:(s[<span class="number">17</span>]-<span class="string">&#x27;0&#x27;</span>); <span class="comment">//如果最后一位是X的话就转化为10，其他不变 </span></span><br><span class="line">	<span class="keyword">return</span> (m[sum%<span class="number">11</span>] == temp);   <span class="comment">//返回的值就是校验值与身份证最后一位是否相同 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,flag=<span class="number">0</span>;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;s;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">isTrue</span>())&#123;   <span class="comment">//如果校验没有通过就把这个身份证输出，并把flag置1 </span></span><br><span class="line">			cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;  <span class="comment">//如果flag为0的话说明所有输入的身份证都通过校验 </span></span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;All passed&quot;</span>;</span><br><span class="line">	&#125;		</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>早知道暑假不留校了</title>
    <url>/2022/09/08/%E6%97%A9%E7%9F%A5%E9%81%93%E6%9A%91%E5%81%87%E4%B8%8D%E7%95%99%E6%A0%A1%E4%BA%86/</url>
    <content><![CDATA[<img src="/images/ljh.png" alt="早知道暑假不留校了" style="zoom:50%;">]]></content>
      <categories>
        <category>李季鸿的日常随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-015 跟奥巴马一起画方块</title>
    <url>/2022/09/08/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-015-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%94%BB%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805124398956544">PTA-天梯赛——L1-015 跟奥巴马一起画方块</a></p>
<p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入在一行中给出正方形边长N（3≤N≤21）和组成正方形边的某种字符C，间隔一个空格。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="我的解法">我的解法</h6>
<p>简单又容易理解，但一看就很low</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">    string x;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;((N<span class="number">-1</span>)/<span class="number">2</span>)+<span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;N; j++) &#123;</span><br><span class="line">		    cout&lt;&lt;x[<span class="number">0</span>];</span><br><span class="line">	    &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="网上的思路-java">网上的思路——Java</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李季鸿</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Scanner s=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//		int n=s.nextInt();</span></span><br><span class="line"><span class="comment">//		char ch1=s.</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">		String[] ch=str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		<span class="type">int</span> n=Integer.parseInt(ch[<span class="number">0</span>]);</span><br><span class="line">		<span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">			b=n/<span class="number">2</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			b=(<span class="type">int</span>)(n/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		System.out.println(b);</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;b;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n-<span class="number">1</span>;j++) &#123;</span><br><span class="line">				System.out.print(ch[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(ch[<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
        <category>PTA</category>
      </categories>
      <tags>
        <tag>天梯赛</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-013 计算阶乘和</title>
    <url>/2022/09/08/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-013-%E8%AE%A1%E7%AE%97%E9%98%B6%E4%B9%98%E5%92%8C/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805127389495296">PTA-天梯赛——L1-013 计算阶乘和</a></p>
<p>对于给定的正整数N，需要你计算 S=1!+2!+3!+…+N!。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入在一行中给出一个不超过10的正整数N。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在一行中输出S的值。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="我的解法">我的解法</h6>
<p>简单又容易理解，但一看就很low</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">JieCheng</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x*(<span class="built_in">JieCheng</span>(x<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">    <span class="type">int</span> SUM = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">		SUM+=<span class="built_in">JieCheng</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    cout&lt;&lt;SUM;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="网上的思路">网上的思路</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">	<span class="type">int</span> n;    </span><br><span class="line">	cin&gt;&gt;n;    </span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;    </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    </span><br><span class="line">	&#123;        </span><br><span class="line">		<span class="type">int</span> temp=<span class="number">1</span>;        </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)        </span><br><span class="line">		&#123;            </span><br><span class="line">			temp=temp*j;        </span><br><span class="line">		&#125;        </span><br><span class="line">		sum=sum+temp;    </span><br><span class="line">	&#125;    </span><br><span class="line">	cout&lt;&lt;sum;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ STL库中map的常见操作</title>
    <url>/2022/09/08/C-STL%E5%BA%93%E4%B8%ADmap%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h6 id="头文件：">头文件：</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<h6 id="定义：">定义：</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m;</span><br><span class="line"><span class="comment">//char是下面中括号中元素的数据类型（当然可以换成其他的），</span></span><br><span class="line"><span class="comment">//int是等号右边的元素的数据类型。定义什么样的类型是随便的，现在听着可能有点迷，看了下面的赋值可能就懂了</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对m进行赋值</span></span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m[<span class="string">&#x27;a&#x27;</span>]=<span class="number">4</span>;</span><br><span class="line">m[<span class="string">&#x27;d&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="string">&#x27;c&#x27;</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还是对m进行赋值</span></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m[<span class="number">1</span>]=<span class="number">6</span>;</span><br><span class="line">m[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line">m[<span class="number">2</span>]=<span class="number">8</span>;</span><br><span class="line"><span class="comment">//这些数值均没有任何特殊意义，都是随便赋的值</span></span><br></pre></td></tr></table></figure>
<h6 id="常用函数">常用函数</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">m.<span class="built_in">push</span>();</span><br><span class="line">m.<span class="built_in">pop</span>(); </span><br><span class="line"><span class="comment">//emmmmmm,上面这两个函数在map里面都没有</span></span><br><span class="line"></span><br><span class="line">m.<span class="built_in">clear</span>();     <span class="comment">//清空m中的所有元素</span></span><br><span class="line">m.<span class="built_in">empty</span>();     <span class="comment">//判断m是否为空</span></span><br><span class="line">m.<span class="built_in">begin</span>();     <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">m.<span class="built_in">end</span>();       <span class="comment">//返回指向map尾部的迭代器</span></span><br><span class="line">m.<span class="built_in">rbegin</span>();    <span class="comment">//返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">m.<span class="built_in">rend</span>();      <span class="comment">//返回一个指向map头部的逆向迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>();     <span class="comment">//删除指定元素</span></span><br><span class="line">m.<span class="built_in">inser</span>();     <span class="comment">//插入元素</span></span><br><span class="line">m.<span class="built_in">find</span>();      <span class="comment">//查找指定元素</span></span><br><span class="line">m.<span class="built_in">swap</span>();      <span class="comment">//交换两个map中的所有元素（注意：两个map中定义的类型需要完全一致）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s1,s2;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s1);</span><br><span class="line">	<span class="built_in">getline</span>(cin,s2);</span><br><span class="line">	set&lt;<span class="type">char</span>&gt; b;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s2.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		b.<span class="built_in">insert</span>(s2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s1.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		set&lt;<span class="type">char</span>&gt;::iterator it=b.<span class="built_in">find</span>(s1[i]);</span><br><span class="line">		<span class="keyword">if</span>(*it!=s1[i])</span><br><span class="line">			cout&lt;&lt;s1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提前说明：</p>
<p>其实在map内部，已经默认将其中的元素按照中括号中的元素的大小，按照从小到大的顺序排列好了</p>
</blockquote>
<h6 id="示例">示例</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m1;</span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;m2;</span><br><span class="line"></span><br><span class="line">   m1[<span class="string">&#x27;q&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">   m1[<span class="string">&#x27;w&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">   m1[<span class="string">&#x27;e&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   m2[<span class="string">&#x27;a&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">   m2[<span class="string">&#x27;s&#x27;</span>] = <span class="number">5</span>;</span><br><span class="line">   m2[<span class="string">&#x27;d&#x27;</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">   cout&lt;&lt;m1.<span class="built_in">size</span>()&lt;&lt;endl;<span class="comment">//运算结果：3</span></span><br><span class="line">   </span><br><span class="line">   m1.<span class="built_in">erase</span>(m1.<span class="built_in">begin</span>());<span class="comment">//删除m1中的第一个元素（指的是中括号中所有元素中最小的，即m1[&#x27;e&#x27;] = 3）</span></span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;::iterator it;<span class="comment">//使用迭代器将map中的元素输出</span></span><br><span class="line">   <span class="keyword">for</span>(it=m1.<span class="built_in">begin</span>();it!=m1.<span class="built_in">end</span>();it++)</span><br><span class="line">   &#123; </span><br><span class="line">      cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<span class="comment">//该语句等价于 cout&lt;&lt;(*it).first&lt;&lt;&#x27; &#x27;&lt;&lt;(*it).second&lt;&lt;endl;</span></span><br><span class="line">      <span class="comment">//这是map的固定输出格式</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//运算结果：q 1</span></span><br><span class="line">   <span class="comment">//         w 2</span></span><br><span class="line">   </span><br><span class="line">   m1.<span class="built_in">swap</span>(m2);<span class="comment">//交换两个map中的所有元素</span></span><br><span class="line">   map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;::reverse_iterator rit;</span><br><span class="line">   <span class="keyword">for</span>(rit=m1.<span class="built_in">rbegin</span>();rit!=m1.<span class="built_in">rend</span>();rit++)<span class="comment">//逆向输出，可以看成从大到小输出</span></span><br><span class="line">   &#123;</span><br><span class="line">      cout&lt;&lt;(*rit).first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(*rit).second&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//运算结果：s 5</span></span><br><span class="line">   <span class="comment">//         d 5</span></span><br><span class="line">   <span class="comment">//         a 4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是整个代码的运算结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200202231054222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MDIwODU4,size_16,color_FFFFFF,t_70" alt="运算结果"></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>PTA-天梯赛——L1-011 A-B</title>
    <url>/2022/09/07/PTA-%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%80%94%E2%80%94L1-011-A-B/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805130426171392">PTA-天梯赛——L1-011 A-B</a></p>
<p>本题要求你计算A−B。不过麻烦的是，A和B都是字符串 —— 即从字符串A中把字符串B所包含的字符全删掉，剩下的字符组成的就是字符串A−B。</p>
<h6 id="输入格式：">输入格式：</h6>
<p>输入在2行中先后给出字符串A和B。两字符串的长度都不超过10e4 ，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p>
<h6 id="输出格式：">输出格式：</h6>
<p>在一行中打印出A−B的结果字符串。</p>
<h6 id="输入样例：">输入样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I love GPLT!  It&#x27;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure>
<h6 id="输出样例：">输出样例：</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I lv GPLT!  It&#x27;s  fn gm!</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="ac-map">AC【map】</h6>
<p>简单又容易理解，但是我不会想到的啊！！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a,b;</span><br><span class="line">	<span class="built_in">getline</span>(cin,a);</span><br><span class="line">	<span class="built_in">getline</span>(cin,b);</span><br><span class="line">	map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;b.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		m[b[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(m[a[i]]!=<span class="number">1</span>) &#123;</span><br><span class="line">			cout&lt;&lt;a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="set">【set】</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s1,s2;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s1);</span><br><span class="line">	<span class="built_in">getline</span>(cin,s2);</span><br><span class="line">	set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s2.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		s.<span class="built_in">insert</span>(s2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s1.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s.<span class="built_in">find</span>(s1[i])==s.<span class="built_in">end</span>())</span><br><span class="line">			cout&lt;&lt;s1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string s1,s2;</span><br><span class="line">	<span class="built_in">getline</span>(cin,s1);</span><br><span class="line">	<span class="built_in">getline</span>(cin,s2);</span><br><span class="line">	set&lt;<span class="type">char</span>&gt; b;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;s1&lt;&lt;endl&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s2.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		b.<span class="built_in">insert</span>(s2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s1.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		set&lt;<span class="type">char</span>&gt;::iterator it=b.<span class="built_in">find</span>(s1[i]);</span><br><span class="line">		<span class="keyword">if</span>(*it!=s1[i])</span><br><span class="line">			cout&lt;&lt;s1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="普通方法1">普通方法1</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a,b,c=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="built_in">getline</span>(cin,a);</span><br><span class="line">	<span class="built_in">getline</span>(cin,b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;b.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">				f=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f==<span class="number">0</span>)</span><br><span class="line">			c=c+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;c;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="普通方法2">普通方法2</h6>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a,b;</span><br><span class="line">	<span class="built_in">getline</span>(cin,a);</span><br><span class="line">	<span class="built_in">getline</span>(cin,b);</span><br><span class="line">	<span class="type">int</span> len=a.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;b.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">		<span class="type">char</span> s=b[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;len; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(s==a[j]) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k=j; k&lt;len<span class="number">-1</span>; k++) &#123;</span><br><span class="line">					a[k]=a[k+<span class="number">1</span>];</span><br><span class="line">				&#125;</span><br><span class="line">				len--;</span><br><span class="line">				j--;<span class="comment">//这里要-- 就是排除连着两个一样的字符</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">		cout&lt;&lt;a[i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题</title>
    <url>/2022/09/07/LeetCode%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1><strong>LeetCode刷题记录</strong></h1>
<h1>贪心算法</h1>
<h2 id="435-无重叠区间"><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435——无重叠区间</a></h2>
<blockquote>
<p>2022-08-014</p>
</blockquote>
<p><strong>方法1.动态规划</strong></p>
<ul>
<li>
<p>思路: dp[i]表示前i个区间中最大不重合区间的个数，首先将区间数组按左边界排序，找出intervals中最多有多少个不重复的区间，动态规划方程dp[i] = Math.max(dp[i]，dp[j] + 1)。intervals的长度减去最多的不重复的区间就是最少删除区间的个数</p>
</li>
<li>
<p>复杂度:时间复杂度0(n^2)，两层嵌套循环leetcode执行超时复杂度过高。空间复杂度0(n), dp数组的空间</p>
<p><strong>javascript</strong></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//leetcode执行超时 复杂度过高</span></span><br><span class="line"><span class="keyword">var</span> eraseOverlapIntervals = <span class="keyword">function</span> (<span class="params">intervals</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!intervals.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    intervals.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]); <span class="comment">//按左边界排序</span></span><br><span class="line">    <span class="keyword">const</span> n = intervals.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">1</span>); <span class="comment">//初始化dp数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="comment">//循环i,j找出intervals中最多有多少个不重复的区间</span></span><br><span class="line">            <span class="comment">//j的右边界小于i的左边界 相当于多出了一个不重合区间</span></span><br><span class="line">            <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], dp[j] + <span class="number">1</span>); <span class="comment">//更新dp[i]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - <span class="title class_">Math</span>.<span class="title function_">max</span>(...dp); <span class="comment">//n减去最多的不重复的区间 就是最少删除区间的个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - Arrays.stream(dp).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方法2.贪心</strong></p>
<ul>
<li>
<p>思路：intervals按右边界排序，然后从左往右遍历，右边界结束的越早，留给后面的区间的空间就越大，不重合的区间个数就越多，intervals的长度减去最多的不重复的区间 就是最少删除区间的个数</p>
</li>
<li>
<p>复杂度：时间复杂度O(nlogn)，数组排序O(nlogn)，循环一次数组O(n)。空间复杂度O(logn)，排序需要的栈空间</p>
<p><strong>javascript</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eraseOverlapIntervals = <span class="keyword">function</span> (<span class="params">intervals</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!intervals.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按右边界排序，然后从左往右遍历，右边界结束的越早，留给后面的区间的空间就越大，不重合的区间个数就越多</span></span><br><span class="line">    intervals.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> n = intervals.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">//right初始化为第一个区间的右边界</span></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">1</span>; <span class="comment">//最多的不重合区间的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">//循环区间数组</span></span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= right) &#123;</span><br><span class="line">            <span class="comment">//当区间的左边界大于上一个区间的右边界的时候 说明是一对不重合区间</span></span><br><span class="line">            ++ans; <span class="comment">//ans加1</span></span><br><span class="line">            right = intervals[i][<span class="number">1</span>]; <span class="comment">//更新right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - ans; <span class="comment">//intervals的长度减去最多的不重复的区间 就是最少删除区间的个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">1</span>] - interval2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= right) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">                right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<span id="more"></span>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端笔记</title>
    <url>/2022/09/06/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>前端笔记</h1>
<p><strong>字体图标-Iconfont</strong></p>
<p>引用字体图标样式表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用图标对应的类名，必须调用两个类名</p>
<ul>
<li>iconfont类：基本样式，包含字体的使用等</li>
<li>icon-xxx:图标对应的类名</li>
</ul>
<hr>
<h2 id="表格隔行换色">表格隔行换色:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用到新的鼠标事件鼠标经过onmouseover鼠标离开onmouseout</span></span><br><span class="line"><span class="comment">核心思路∶鼠标经过tr行，当前的行变背景颜色，鼠标离开去掉当前的背景颜色</span></span><br><span class="line"><span class="comment">注意:第一行( thead里面的行）不需要变换颜色，因此我们获取的是tbody里面的行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素 获取的是 tbody里面的所有行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> trs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">querySelector</span>(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.利用循环绑定注册事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;trs.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.鼠标经过事件 onmouseover</span></span></span><br><span class="line"><span class="language-javascript">            trs[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(11);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;bg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.鼠标离开事件 onmouseout</span></span></span><br><span class="line"><span class="language-javascript">            trs[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(11);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="表单全选">表单全选:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> j_caAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_caAll&#x27;</span>);   <span class="comment">//j_caAll是全局选项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tbs&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>);     <span class="comment">//下面所有的复选框 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//注册事件</span></span></span><br><span class="line"><span class="language-javascript">        j_caAll.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//this.checked 它可以得到当前复选框的选中状态，如果是true就是选中，如果是false就是未选中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            j_tbs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">//控制全选按钮是否选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//每次点击下面的复选框都要检查4个小按钮是否被选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(!j_tbs[i].<span class="property">checked</span>)&#123;<span class="comment">//有一个按钮没有被选中</span></span></span><br><span class="line"><span class="language-javascript">                        flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">break</span>; <span class="comment">//退出for循环，这样可以提高只要效率，因为只要有一个没被选中，就无需循环</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                j_caAll.<span class="property">checked</span> = flag;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="tab栏切换">Tab栏切换:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab_list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = tab_list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//for循环绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; lis.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//开始给5个小li 设置索引号</span></span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.上的模块选项卡，点击某一个，当前这个底色会是红色，其余不变（排他思想）修改类名的方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//干掉所有人 其余的li清除class 这个类</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i &lt; lis.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//留下我自己</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2.下面的显示内容模块</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//干掉所有人 让其余的item 这些div隐藏</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//留下我自己 让对应的item 显示出来</span></span></span><br><span class="line"><span class="language-javascript">                items[index].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="下拉菜单">下拉菜单:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = nav.<span class="property">children</span>; <span class="comment">//得到四个小li</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 循环注册事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="简单留言板">简单留言板:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)创建元素</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">//现有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                 li.<span class="property">innerHTML</span> = text.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li,ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="删除留言">删除留言:</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)创建元素</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">//现有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                 li.<span class="property">innerHTML</span> = text.<span class="property">value</span>  +  <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<span class="comment">//javascript:;可以阻止链接跳转</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li,ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(3)删除元素 删除的是当前链接的li 它的父亲</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; <span class="keyword">as</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//node.removeChild(child); 删除的是li当前所在的li this.parentNode;</span></span></span><br><span class="line"><span class="language-javascript">                        ul.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="动态生成表格：">动态生成表格：</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Author: error: git config user.name &amp;&amp; git config user.email &amp; please set dead value or install git</span></span><br><span class="line"><span class="comment"> * @Date: 2022-08-17 12:40:22</span></span><br><span class="line"><span class="comment"> * @LastEditors: error: git config user.name &amp;&amp; git config user.email &amp; please set dead value or install git</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-08-17 14:20:42</span></span><br><span class="line"><span class="comment"> * @FilePath: \JS\动态生成表格.html</span></span><br><span class="line"><span class="comment"> * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;&#x27;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.先去准备好学生的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> datas =[</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;C++&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;java&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;李季鸿&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;linux&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        ];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 往tbody里面创建行：有几个人（通过数组的长度）我们就创建几行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.<span class="property">length</span>; i++)&#123;<span class="comment">//外面的for循环管是行 tr</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.创建 tr 行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            tbody.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.行里面创建单元格(跟数据有关系的3个单元格)  td 单元格的数量取决于每个对象里面的属性个数 for循环遍历对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> datas[i])&#123;  <span class="comment">//里卖弄的for循环管的是列 td</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//创建单元格</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//吧对象里面的属性值 datas[i][k] 给td</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(datas[i][k]);</span></span></span><br><span class="line"><span class="language-javascript">                td.<span class="property">innerHTML</span> = datas[i][k];</span></span><br><span class="line"><span class="language-javascript">                tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.创建有删除2个字的单元格</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            td.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<span class="comment">//javascript:;可以阻止链接跳转</span></span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(td);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 删除操作开始</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//点击a 删除当前a所在的行(链接的爸爸的爸爸) node.removeChild(child)</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
